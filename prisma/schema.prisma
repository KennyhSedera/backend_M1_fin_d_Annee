datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  useremail String   @unique
  password  String 
  status    String 
  userPhoto      String?
  role      String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mention {
  id        Int        @id @default(autoincrement())
  nom       String
  parcours  Parcours[]
}

model Parcours {
  id              Int              @id @default(autoincrement())
  nom             String
  mentionId       Int
  mention         Mention          @relation(fields: [mentionId], references: [id], onDelete: Cascade, map: "parcours_mention_fkey")
  parcoursNiveaux ParcoursNiveau[]
  volumesHoraire  VolumeHoraire[]  @relation("parcours_volume_horaire_fkey")
  uniteEnseignements UniteEnseignement[] @relation("parcours_unite_enseignement_fkey")
}

model Niveau {
  id                   Int                  @id @default(autoincrement())
  nom                  String
  parcoursNiveaux      ParcoursNiveau[]
  volumesHoraire       VolumeHoraire[]      @relation("niveau_volume_horaire_fkey")
  uniteEnseignements    UniteEnseignement[]  @relation("niveau_unite_enseignement_fkey")
}

model ParcoursNiveau {
  id                 Int             @id @default(autoincrement())
  parcoursId         Int
  niveauId           Int
  anneeUniversitaire String
  nombreEtudiants    Int
  nombreGroupesET    Int
  nombreGroupesED    Int
  nombreGroupesEP    Int
  parcours           Parcours        @relation(fields: [parcoursId], references: [id], onDelete: Cascade, map: "parcoursNiveau_parcours_fkey")
  niveau             Niveau          @relation(fields: [niveauId], references: [id], onDelete: Cascade, map: "parcoursNiveau_niveau_fkey")
  volumesHoraire     VolumeHoraire[]
  heuresComplementaires HeuresComplementaire[]
}

model UniteEnseignement {
  id              Int            @id @default(autoincrement())
  name            String
  niveauId        Int?
  parcoursId      Int?
  
  niveau          Niveau?        @relation(fields: [niveauId], references: [id], onDelete: Cascade, map: "uniteEnseignement_niveau_fkey", name: "niveau_unite_enseignement_fkey")
  parcours        Parcours?      @relation(fields: [parcoursId], references: [id], onDelete: Cascade, map: "uniteEnseignement_parcours_fkey", name: "parcours_unite_enseignement_fkey")
  
  volumeHoraire   VolumeHoraire[]
}

model VolumeHoraire {
  id                    Int                       @id @default(autoincrement())
  elementConstitutif    String
  semestre              String
  et                    Int?
  ed                    Int?
  ep                    Int?
  creditUE              Int?
  creditEC              Float
  poidsEC               Float
  parcoursNiveauId      Int?
  parcoursNiveau        ParcoursNiveau?           @relation(fields: [parcoursNiveauId], references: [id], onDelete: Cascade)
  uniteEnseignementId   Int?
  uniteEnseignement     UniteEnseignement?        @relation(fields: [uniteEnseignementId], references: [id], onDelete: Cascade)
  enseignantVolumeHoraire EnseignantVolumeHoraire[]

  parcours              Parcours[]                @relation("parcours_volume_horaire_fkey")
  niveau                Niveau[]                  @relation("niveau_volume_horaire_fkey")

  @@map("volume_horaire")
}

model Grade {
  id           Int            @id @default(autoincrement())
  title        String
  taux         Int
  enseignants  Enseignant[]   @relation("grade_enseignant")
}

model Enseignant {
  id                      Int                      @id @default(autoincrement())
  codeEns                 String
  nom                     String
  prenom                  String
  contact                 String
  CIN                     String
  gradeId                 Int
  Oblig                   Int? @default(0)
  grade                   Grade?                   @relation(fields: [gradeId], references: [id], name: "grade_enseignant", onDelete:Cascade) 
  type                    String
  ensPhoto      String?
  enseignantVolumeHoraire EnseignantVolumeHoraire[]
  heuresComplementaires   HeuresComplementaire[]
}

model EnseignantVolumeHoraire {
  id              Int             @id @default(autoincrement())
  enseignantId    Int
  enseignant      Enseignant      @relation(fields: [enseignantId], references: [id], onDelete: Cascade, map: "enseignantVolumeHoraire_enseignant_fkey")
  volumeHoraireId Int
  volumeHoraire   VolumeHoraire   @relation(fields: [volumeHoraireId], references: [id], onDelete: Cascade, map: "enseignantVolumeHoraire_volumeHoraire_fkey")
}

model HeuresComplementaire {
  id               Int            @id @default(autoincrement())
  enseignantId     Int
  uniteEnseignement String
  parcoursNiveauId         Int
  nbEncadrement    Int?
  tauxEncadrement  Int?
  nbSoutenance     Int?
  tauxSoutenance   Int?
  enseignant       Enseignant  @relation(fields: [enseignantId], references: [id], onDelete: Cascade, map: "heuresComplementaire_enseignant_fkey")
  parcoursNiveau   ParcoursNiveau  @relation(fields: [parcoursNiveauId], references: [id], onDelete: Cascade, map: "heuresComplementaire_niveau_fkey")
}
